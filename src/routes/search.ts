import express from 'express';
import { AffiliateService } from '../services/affiliateService';
import { CacheService } from '../services/cacheService'; // KONTROLLOJE KÃ‹TÃ‹ IMPORT!

const router = express.Router();
const affiliateService = new AffiliateService();
// Inicializo shÃ«rbimin e Caching-ut
const cacheService = CacheService.getInstance(); 

/**
 * Funksioni pÃ«r tÃ« krijuar njÃ« Ã‡elÃ«s Unik Cache-i
 * PÃ«rdor JSON.stringify me Ã§elÃ«sa tÃ« renditur pÃ«r tÃ« garantuar unikalitetin
 * pavarÃ«sisht nga rendi i hyrjes.
 */
function generateCacheKey(params: any): string {
    // Rendit Ã§elÃ«sat e hyrjes pÃ«r tÃ« siguruar konsistencÃ«
    const sortedKeys = Object.keys(params).sort();
    
    // Kthe objektin nÃ« string me renditje
    const sortedParamsString = JSON.stringify(params, sortedKeys);
    
    // Ã‡elÃ«si i cache-it (i ruajtur nÃ« Supabase ose nÃ« RAM)
    return `search_results_${sortedParamsString}`;
}


router.post('/', async (req, res) => {
  let isCached = false; // Treguesi qÃ« tregon nÃ«se u shÃ«rbye nga cache
  
  try {
    const {
      category = 'all',
      destination,
      distance = 0,
      budget = 0,
      persons = 0,
      check_in,
      check_out,
      user_location
    } = req.body;

    // 1. Validimi i DetyrueshÃ«m
    if (!destination || !user_location) {
      return res.status(400).json({
        error: 'Destination and user location are required'
      });
    }

    const searchParams = {
      category,
      destination,
      distance: Number(distance),
      budget: Number(budget),
      persons: Number(persons),
      check_in,
      check_out,
      user_location
    };

    const cacheKey = generateCacheKey(searchParams);

    // 2. HAPI KRITIK: KONTROLLO CACHE-IN
    const cachedResults = await cacheService.getFromCache(cacheKey);

    if (cachedResults) {
        console.log(`âœ… KÃ«rkesa u shÃ«rbye nga Cache: ${cacheKey}`);
        isCached = true;
        
        // Kthe pÃ«rgjigjen MENJÃ‹HERÃ‹ (Performanca maksimale & Kosto 0)
        return res.json({
            results: cachedResults,
            metadata: { 
                // ZÃ«vendÃ«soje kÃ«tÃ« me metadata dinamike nga cachedResults
                total_results: cachedResults.length,
                category,
                search_center: user_location
            },
            cache_info: {
                cached: true,
                last_updated: new Date().toISOString()
            }
        });
    }

    // 3. NÃ‹SE S'KA CACHE: Ekzekuto kÃ«rkesÃ«n e vÃ«rtetÃ«
    const results = await affiliateService.search(searchParams);

    // 4. RUAJ NÃ‹ CACHE pÃ«r herÃ«n tjetÃ«r
    if (results.length > 0) {
        await cacheService.setToCache(cacheKey, results);
        console.log(`ðŸ’¾ Rezultati i ri u ruajt nÃ« Cache: ${cacheKey}`);
    }

    // 5. Kthe pÃ«rgjigjen origjinale
    res.json({
      results,
      metadata: {
        total_results: results.length,
        category,
        budget_range: budget ? {
          min: budget * 0.8,
          max: budget,
          user_input: budget
        } : null,
        distance_range: distance ? `0-${distance}km` : 'Any distance',
        search_center: user_location
      },
      cache_info: {
        cached: isCached, // Do tÃ« jetÃ« false
        last_updated: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error('Search error:', error);
    res.status(500).json({
      error: 'Internal server error during search'
    });
  }
});

export default router;
